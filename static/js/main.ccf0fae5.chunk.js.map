{"version":3,"sources":["components/CountryPicker/CountryPicker.module.css","components/MapChart/MapChart.module.css","components/Cards/Cards.module.css","components/Cards/CardItem.jsx","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/Chart/StateChart.jsx","components/CountryPicker/CountryPicker.jsx","components/CountryFlagPicker/CountryFlagPicker.jsx","components/Table/Table.jsx","components/Table/StateTable.jsx","components/MapChart/MapChart.jsx","App.js","index.js","components/Table/Table.module.css","components/Chart/Chart.module.css","App.module.css","components/CountryFlagPicker/CountryFlagPicker.module.css"],"names":["module","exports","CardItem","countryNum","globalNum","country","title","className","cx","styles","information__card__item","key","information__card__item__title","information__card__item__country","start","end","Number","duartion","separator","Cards","conData","gloData","confirmed","information","information__card","Object","keys","map","index","value","information__date","format","lastUpdate","url","fetchCountryData","a","countryUrl","toLowerCase","axios","get","data","recovered","deaths","console","log","error","fetchGlobalData","fetchDailyData","modifiedData","dailyData","total","date","reportDate","fetchDailyStateData","stateUrl","stateData","state","provinceState","stateDataClean","filter","self","findIndex","t","fetchCountries","countries","name","Chart","useState","setDailyData","useEffect","fetchData","lineChart","length","labels","slice","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","text","size","container","StateChart","setStateData","Confirmed","Recovered","Deaths","toString","borderWidth","hoverBackgroundColor","hoverBorderColor","maintainAspectRatio","barchart__horizontal","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","CountryFlagPicker","countrySelected","flag","au","us","br","ru","es","gb","fr","de","tr","in","ir","cn","src","alt","values","onClick","flag__item","style","transform","Table","tableData","i","push","table","table_title","columns","Header","accessor","textAlign","width","defaultPageSize","StateTable","showPagination","pageSize","memo","countryHovered","setCountrySelected","projection","data-tip","projectionConfig","scale","rotate","geography","geographies","geo","rsmKey","stroke","strokeWidth","onMouseEnter","NAME","properties","onMouseLeave","default","outline","hover","strockWidth","pressed","transition","App","countryData","globalData","content","onPickerCountryChange","covData","setState","onMapCountryHover","covContryData","this","footer","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,YAAc,qC,oBCAhCD,EAAOC,QAAU,CAAC,IAAM,wB,yDCAxBD,EAAOC,QAAU,CAAC,YAAc,2BAA2B,kBAAoB,iCAAiC,wBAA0B,uCAAuC,UAAY,yBAAyB,UAAY,yBAAyB,OAAS,sBAAsB,+BAAiC,8CAA8C,iCAAmC,gDAAgD,kBAAoB,mC,gMCyBjcC,EApBE,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,WAAYC,EAAgC,EAAhCA,UAAWC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAChD,OAAKH,EAKD,yBAAKI,UAAWC,IAAGC,IAAOC,wBAAyBD,IAAOH,IAASK,IAAKL,GACpE,wBAAIC,UAAWE,IAAOG,gCAAiCN,GACvD,wBAAIC,UAAWE,IAAOI,kCAClB,8BAAOR,GAAoB,YAA3B,MACA,kBAAC,IAAD,CAASS,MAAO,EAAGC,IAAKC,OAAOb,GAAac,SAAU,EAAGC,UAAU,OAEvE,wBAAIX,UAAWE,IAAOI,kCAClB,0CACA,kBAAC,IAAD,CAASC,MAAO,EAAGC,IAAKC,OAAOZ,GAAYa,SAAU,EAAGC,UAAU,QAZnE,W,kBC0BAC,EA5BD,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,QAASC,EAAuB,EAAvBA,QAAShB,EAAc,EAAdA,QAC/B,OAAKe,EAAQE,UAKT,yBAAKf,UAAWE,IAAOc,aACnB,yBAAKhB,UAAWE,IAAOe,mBAClBC,OAAOC,KAAKN,GAASO,KAAI,SAAChB,EAAKiB,GAAN,OACtB,kBAAC,EAAD,CACIzB,WAAYiB,EAAQT,GAAKkB,MACzBzB,UAAWiB,EAAQV,GAAKkB,MACxBxB,QAASA,EACTC,MAAOK,EACPA,IAAKiB,QAIjB,yBAAKrB,UAAWE,IAAOqB,mBAAvB,eACiB,IACb,8BACI,kBAAC,IAAD,CAAQC,OAAO,oBAAoBV,EAAQW,eAnBhD,W,wBCHTC,EAAM,iCAoCCC,EAAgB,uCAAG,WAAO7B,GAAP,yBAAA8B,EAAA,6DACtBC,EADsB,UACNH,EADM,sBACW5B,EAAQgC,eADnB,kBAMdC,IAAMC,IAAIH,GANI,2BAKpBI,KAAQlB,EALY,EAKZA,UAAWmB,EALC,EAKDA,UAAWC,EALV,EAKUA,OALV,kBAQjB,CACHpB,YACAmB,YACAC,WAXoB,yCAcxBC,QAAQC,IAAR,MAdwB,kBAejB,CACHC,MAAM,GAAD,OAAKxC,EAAL,8BAhBe,0DAAH,sDAwBhByC,EAAe,uCAAG,sCAAAX,EAAA,+EAIbG,IAAMC,IAAIN,GAJG,2BAGnBO,KAAQlB,EAHW,EAGXA,UAAWmB,EAHA,EAGAA,UAAWC,EAHX,EAGWA,OAAQV,EAHnB,EAGmBA,WAHnB,kBAMhB,CACHV,YACAmB,YACAC,SACAV,eAVmB,kCAavBW,QAAQC,IAAR,MAbuB,0DAAH,qDAoBfG,EAAc,uCAAG,gCAAAZ,EAAA,sEAEtBQ,QAAQC,IAAI,kBAFU,SAGCN,IAAMC,IAAN,UAAaN,EAAb,WAHD,uBAGdO,EAHc,EAGdA,KAEFQ,EAAeR,EAAKb,KAAI,SAACsB,GAAD,MAAgB,CAC1C3B,UAAW2B,EAAU3B,UAAU4B,MAC/BR,OAAQO,EAAUP,OAAOQ,MACzBC,KAAMF,EAAUG,eARE,kBAWfJ,GAXe,kCAatBL,QAAQC,IAAR,MAbsB,0DAAH,qDAoBdS,EAAmB,uCAAG,WAAOhD,GAAP,uBAAA8B,EAAA,6DACzBmB,EADyB,UACXrB,EADW,sBACM5B,EAAQgC,cADd,gCAIJC,IAAMC,IAAIe,GAJN,uBAInBd,EAJmB,EAInBA,KAEFe,EAAYf,EAAKb,KAAI,SAAC6B,GAAD,MAAY,CACnCC,cAAeD,EAAMC,cACrBnC,UAAWkC,EAAMlC,UACjBmB,UAAWe,EAAMf,UACjBC,OAAQc,EAAMd,OACdS,KAAMK,EAAMxB,eAIV0B,EAAiBH,EAAUI,QAE7B,SAACH,EAAO5B,EAAOgC,GAAf,OACIhC,IAAUgC,EAAKC,WAAU,SAACC,GAAD,OAAOA,EAAEL,gBAAkBD,EAAMC,oBAlBvC,kBAsBpBC,GAtBoB,kCAwB3Bf,QAAQC,IAAR,MAxB2B,0DAAH,sDA+BnBmB,EAAc,uCAAG,8BAAA5B,EAAA,sEAEtBQ,QAAQC,IAAI,kBAFU,SAKZN,IAAMC,IAAN,UAAaN,EAAb,eALY,uBAIV+B,EAJU,EAIlBxB,KAAQwB,UAJU,kBAMfA,EAAUrC,KAAI,SAACtB,GAAD,OAAaA,EAAQ4D,SANpB,gCAQtBtB,QAAQC,IAAR,MARsB,yDAAH,qD,yBCnEZsB,EA/DD,SAAC,GAAyD,IAAD,IAAtD1B,KAAQlB,EAA8C,EAA9CA,UAAWmB,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,OAAUrC,EAAc,EAAdA,QAAc,EACjC8D,mBAAS,IADwB,mBAC5DlB,EAD4D,KACjDmB,EADiD,KAGnEC,qBAAU,YACS,uCAAG,sBAAAlC,EAAA,kEACdiC,EADc,SACKrB,IADL,6EAAH,qDAIfuB,KACD,CAACF,IAEJ,IAAMG,EACmB,IAArBtB,EAAUuB,OACN,kBAAC,IAAD,CACIhC,KAAM,CACFiC,OAAQxB,EAAUyB,OAAO,IAAI/C,KAAI,qBAAGwB,QACpCwB,SAAU,CACN,CACInC,KAAMS,EAAUyB,OAAO,IAAI/C,KAAI,qBAAGL,aAClCsD,MAAO,WACPC,YAAa,yBACbC,gBAAiB,yBACjBC,MAAM,GAEV,CACIvC,KAAMS,EAAUyB,OAAO,IAAI/C,KAAI,qBAAGe,UAClCkC,MAAO,SACPC,YAAa,yBACbC,gBAAiB,yBACjBC,MAAM,OAKtB,KAEFC,EAAW1D,EACb,kBAAC,IAAD,CACIkB,KAAM,CACFiC,OAAQ,CAAC,WAAY,YAAa,UAClCE,SAAU,CACN,CACIC,MAAO,SACPE,gBAAiB,CACb,yBACA,2BACA,0BAEJtC,KAAM,CAAClB,EAAUO,MAAOY,EAAUZ,MAAOa,EAAOb,UAI5DoD,QAAS,CACLC,OAAQ,CAAEC,SAAS,GACnB7E,MAAO,CAAE6E,SAAS,EAAMC,KAAK,oBAAD,OAAsB/E,IAClDgF,KAAM,MAGd,KAEJ,OAAO,yBAAK9E,UAAWE,IAAO6E,WAAYjF,EAAU2E,EAAWT,ICjBpDgB,EA1CI,SAAC,GAAiB,IAAflF,EAAc,EAAdA,QAAc,EACE8D,mBAAS,IADX,mBACzBZ,EADyB,KACdiC,EADc,KAGhCnB,qBAAU,YACS,uCAAG,sBAAAlC,EAAA,kEACdqD,EADc,SACKnC,EAAoBhD,GAAoB,aAD7C,6EAAH,qDAIfiE,KACD,CAACkB,EAAcnF,IAElB,IAKImC,EAAO,KAmBX,OAlBIf,OAAOC,KAAK6B,GAAWiB,SACvBhC,EAAO,CACHiC,OAAQlB,EAAUmB,MAAM,EAAG,IAAI/C,KAAI,SAAC6B,GAAD,OAAWA,EAAMC,iBACpDkB,SATO,CACX,CAAEc,UAAW,0BACb,CAAEC,UAAW,4BACb,CAAEC,OAAQ,2BAMWhE,KAAI,SAACiD,GAAD,MAAY,CAC7BA,MAAOnD,OAAOC,KAAKkD,GAAOgB,WAC1Bd,gBAAiBF,EAAMnD,OAAOC,KAAKkD,IACnCC,YAAaD,EAAMnD,OAAOC,KAAKkD,IAC/BiB,YAAa,EACbC,qBAAsBlB,EAAMnD,OAAOC,KAAKkD,IACxCmB,iBAAkBnB,EAAMnD,OAAOC,KAAKkD,IACpCpC,KAAMe,EAAU5B,KAAI,SAAC6B,GAAD,OAAWA,EAAM/B,OAAOC,KAAKkD,GAAOgB,WAAWvD,kBACnE4C,QAAS,CACLe,qBAAqB,SAOjC,yBAAKzF,UAAWC,IAAGC,IAAO6E,UAAW7E,IAAOwF,uBACvCzD,GAAQf,OAAOC,KAAK6B,GAAWiB,OAAS,EAAI,kBAAC,IAAD,CAAehC,KAAMA,IAAW,O,oCCb1E0D,EAzBO,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,oBAA0B,EACChC,mBAAS,IADV,mBACxCiC,EADwC,KACtBC,EADsB,KAW/C,OARAhC,qBAAU,YACS,uCAAG,sBAAAlC,EAAA,kEACdkE,EADc,SACYtC,IADZ,6EAAH,qDAIfC,KACD,CAACqC,IAGA,kBAACC,EAAA,EAAD,CAAa/F,UAAWE,IAAO8F,aAC3B,kBAACC,EAAA,EAAD,CAAcC,aAAa,GAAGC,SAAU,SAACC,GAAD,OAAOR,EAAoBQ,EAAEC,OAAO/E,SACxE,4BAAQA,MAAM,IAAd,UACCuE,EAAiBzE,KAAI,SAACtB,EAASuB,GAAV,OAClB,4BAAQjB,IAAKiB,EAAOC,MAAOxB,GACtBA,S,iBCiBVwG,EApCW,SAAC,GAA8C,IAA5CC,EAA2C,EAA3CA,gBAAiBX,EAA0B,EAA1BA,oBAgB1C,OACI,yBAAK5F,UAAWE,IAAOsG,MAhBP,CAChB,CAAEC,GAAI,aACN,CAAEC,GAAI,4BACN,CAAEC,GAAI,UACN,CAAEC,GAAI,UACN,CAAEC,GAAI,SACN,CAAEC,GAAI,kBACN,CAAEC,GAAI,UACN,CAAEC,GAAI,WACN,CAAEC,GAAI,UACN,CAAEC,GAAI,SACN,CAAEC,GAAI,QACN,CAAEC,GAAI,UAKWhG,KAAI,SAACtB,GAAD,OACb,yBACIuH,IAAG,sCAAiCnG,OAAOC,KAAKrB,GAAS,GAAtD,gBACHwH,IAAG,eAAUpG,OAAOqG,OAAOzH,GAAS,IACpCM,IAAKc,OAAOC,KAAKrB,GAAS,GAC1B0H,QAAS,kBAAM5B,EAAoB1E,OAAOqG,OAAOzH,GAAS,KAC1DE,UAAWE,IAAOuH,WAClBC,MACInB,IAAoBrF,OAAOqG,OAAOzH,GAAS,GACrC,CAAE6H,UAAW,eACb,Y,iCCmCfC,EA5DD,SAAC,GAAiB,IAAf9H,EAAc,EAAdA,QAAc,EACO8D,mBAAS,IADhB,mBACpBlB,EADoB,KACTmB,EADS,KAG3BC,qBAAU,YACS,uCAAG,sBAAAlC,EAAA,kEACdiC,EADc,SACKrB,IADL,6EAAH,qDAIfuB,KACD,CAACF,IAEJ,IAAMgE,EAAY,GAClB,GAAInF,EAAUuB,OAAS,EACnB,IAAK,IAAI6D,EAAIpF,EAAUuB,OAAQ6D,EAAI,EAAGA,IAClCD,EAAUE,KAAK,CACXnF,KAAMF,EAAUoF,EAAI,GAAGlF,KACvBT,OAAQO,EAAUoF,EAAI,GAAG3F,OAASO,EAAUoF,EAAI,GAAG3F,OACnDpB,UAAW2B,EAAUoF,EAAI,GAAG/G,UAAY2B,EAAUoF,EAAI,GAAG/G,YAyBrE,OACI,6BACiB,KAAZjB,EACG,yBAAKE,UAAWE,IAAO8H,OACnB,uBAAGhI,UAAWE,IAAO+H,aAArB,uBACA,kBAAC,IAAD,CACIhG,KAAM4F,EACNK,QA3BJ,CACZ,CACIC,OAAQ,OACRC,SAAU,OACVV,MAAO,CAAEW,UAAW,WAExB,CACIF,OAAQ,WACRC,SAAU,YACVE,MAAO,GACPZ,MAAO,CAAEW,UAAW,WAExB,CACIF,OAAQ,SACRC,SAAU,SACVE,MAAO,GACPZ,MAAO,CAAEW,UAAW,YAaRE,gBAAiB,GACjBvI,UAAU,iCAGlB,OCIDwI,EA3DI,SAAC,GAAiB,IAAf1I,EAAc,EAAdA,QAAc,EACE8D,mBAAS,IADX,mBACzBZ,EADyB,KACdiC,EADc,KAGhCnB,qBAAU,YACS,uCAAG,sBAAAlC,EAAA,kEACdqD,EADc,SACKnC,EAAoBhD,GAAoB,aAD7C,6EAAH,qDAIfiE,KACD,CAACkB,EAAcnF,IAElBsC,QAAQC,IAAIW,GA4BZ,OACI,yBAAKhD,UAAWE,IAAO8H,OAClB9G,OAAOC,KAAK6B,GAAWiB,OAAS,GAAiB,KAAZnE,EAClC,6BACI,uBAAGE,UAAWE,IAAO+H,aAArB,iBACmBnI,GAAoB,aAEvC,kBAAC,IAAD,CACImC,KAAMe,EACNkF,QAnCJ,CACZ,CACIC,OAAQ,QACRC,SAAU,gBACVV,MAAO,CAAEW,UAAW,SAExB,CACIF,OAAQ,WACRC,SAAU,YACVE,MAAO,GACPZ,MAAO,CAAEW,UAAW,WAExB,CACIF,OAAQ,YACRC,SAAU,YACVE,MAAO,GACPZ,MAAO,CAAEW,UAAW,WAExB,CACIF,OAAQ,SACRC,SAAU,SACVE,MAAO,GACPZ,MAAO,CAAEW,UAAW,YAcRI,gBAAgB,EAChBC,SAAUxH,OAAOC,KAAK6B,GAAWiB,OACjCjE,UAAU,yBAGlB,O,2BCeD2I,mBAvEE,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,eAAgBhD,EAA0B,EAA1BA,oBAChC9B,qBAAU,eADgD,MAGZF,mBAAS,IAHG,mBAGnD2C,EAHmD,KAGlCsC,EAHkC,KAc1D,OACI,yBAAK7I,UAAWE,KAAOkB,KACnB,kBAAC,gBAAD,CACI0H,WAAY,cACZC,WAAS,GACTC,iBAAkB,CAAEC,MAAO,IAAKC,OAAQ,EAAE,IAAK,EAAG,KAGlD,kBAAC,cAAD,CAAaC,UAhBrB,2GAiBa,qBAAGC,YACYhI,KAAI,SAACiI,GAAD,OACZ,kBAAC,YAAD,CACIjJ,IAAKiJ,EAAIC,OACTH,UAAWE,EACXE,OAAO,UACPC,YAAY,MACZC,aAAc,WAAO,IACTC,EAASL,EAAIM,WAAbD,KACRd,EAAe,GAAD,OAAIc,KAEtBE,aAAc,WACVhB,EAAe,KAEnBpB,QAAS,kBA7BfpB,EA6BkCiD,EAAIM,WA3BxD/D,EAAoBQ,EAAEsD,WACtBb,EAAmBzC,EAAEsD,MAHJ,IAACtD,GA8BM5B,KACI+B,IAAoB8C,EAAIM,WAAWD,KAC7B,yBACA,UAEVhC,MAAO,CACHmC,QAAS,CACLC,QAAS,QAEbC,MAAO,CACHvF,KAAM,yBACN+E,OAAQ,yBACRS,YAAa,GACbF,QAAS,QAEbG,QAAS,CACLzF,KAAM,yBACN+E,OAAQ,oBACRC,YAAa,IACbM,QAAS,OACTI,WAAY,2B,8BC2BrCC,G,4MA1EXlH,MAAQ,CACJmH,YAAa,GACbC,WAAY,GACZ5I,WAAY,GACZ3B,QAAS,GACTwK,QAAS,I,EAcbC,sB,uCAAwB,WAAOzK,GAAP,iBAAA8B,EAAA,6DAEhB2E,EAAkBzG,EAFF,SAIhBsC,QAAQC,IAAIvC,GACI,6BAAZA,IACAyG,EAAkB,OANN,SAQM5E,EAAiB4E,GARvB,QAQViE,EARU,QASHlI,OACT,EAAKmI,SAAS,CAAEL,YAAaI,EAAS1K,QAASyG,IAVnC,kDAahBnE,QAAQC,IAAR,MAbgB,0D,wDAiBxBqI,kBAAoB,SAACJ,GAEjB,EAAKG,SAAL,2BAAmB,EAAKxH,OAAxB,IAA+BqH,QAASA,M,oMA7BlB/H,I,cAAhBiI,E,gBACsB7I,EAAiB,a,OAAvCgJ,E,OACNC,KAAKH,SAAS,CACVJ,WAAYG,EACZ/I,WAAY+I,EAAQ/I,WACpB2I,YAAaO,IAEjBvI,QAAQC,IAAI,qB,qIAyBN,IAAD,EACwCuI,KAAK3H,MAA1CmH,EADH,EACGA,YAAaC,EADhB,EACgBA,WAAYvK,EAD5B,EAC4BA,QAEjC,OACI,yBAAKE,UAAWE,KAAO6E,WACnB,wBAAI/E,UAAWE,KAAOH,OAAtB,oBACA,kBAAC,EAAD,CAAOc,QAASuJ,EAAatJ,QAASuJ,EAAYvK,QAASA,IAC3D,kBAAC,EAAD,CACIyG,gBAAiBzG,EACjB8F,oBAAqBgF,KAAKL,wBAE9B,kBAAC,EAAD,CAAe3E,oBAAqBgF,KAAKL,wBACzC,yBAAKvK,UAAWE,KAAOkB,KACnB,kBAAC,GAAD,CACIwH,eAAgBgC,KAAKF,kBACrB9E,oBAAqBgF,KAAKL,wBAE9B,kBAAC,KAAD,KAAeK,KAAK3H,MAAMqH,UAE9B,kBAAC,EAAD,CAAOrI,KAAMmI,EAAatK,QAASA,IACnC,kBAAC,EAAD,CAAOA,QAASA,IAChB,kBAAC,EAAD,CAAYA,QAASA,IACrB,kBAAC,EAAD,CAAYA,QAASA,IACrB,uBAAGE,UAAWE,KAAO2K,QAArB,gBACiB,uBAAGC,KAAK,0CAAR,cADjB,sBAEqB,IACjB,uBAAGA,KAAK,6CAAR,qB,GApEFC,IAAMC,WCVxBC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,U,mBCJjD3L,EAAOC,QAAU,CAAC,aAAe,4BAA4B,YAAc,2BAA2B,MAAQ,uB,mBCA9GD,EAAOC,QAAU,CAAC,UAAY,yBAAyB,qBAAuB,sC,mBCA9ED,EAAOC,QAAU,CAAC,UAAY,uBAAuB,MAAQ,mBAAmB,IAAM,iBAAiB,OAAS,sB,mBCAhHD,EAAOC,QAAU,CAAC,KAAO,gCAAgC,WAAa,yC","file":"static/js/main.ccf0fae5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"map\":\"MapChart_map__3n7R-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"information\":\"Cards_information__7OXae\",\"information__card\":\"Cards_information__card__2mXQ4\",\"information__card__item\":\"Cards_information__card__item__Pkf5i\",\"confirmed\":\"Cards_confirmed__iMMyf\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\",\"information__card__item__title\":\"Cards_information__card__item__title__mavP9\",\"information__card__item__country\":\"Cards_information__card__item__country__3-58w\",\"information__date\":\"Cards_information__date__2raRR\"};","import React from 'react';\nimport CountUp from 'react-countup';\n\nimport styles from './Cards.module.css';\nimport cx from 'classnames';\n\nconst CardItem = ({ countryNum, globalNum, country, title }) => {\n    if (!countryNum) {\n        return 'Loading';\n    }\n\n    return (\n        <div className={cx(styles.information__card__item, styles[title])} key={title}>\n            <h1 className={styles.information__card__item__title}>{title}</h1>\n            <h2 className={styles.information__card__item__country}>\n                <span>{country ? country : 'Australia'}: </span>\n                <CountUp start={0} end={Number(countryNum)} duartion={3} separator=',' />\n            </h2>\n            <h2 className={styles.information__card__item__country}>\n                <span>Global: </span>\n                <CountUp start={0} end={Number(globalNum)} duartion={3} separator=',' />\n            </h2>\n        </div>\n    );\n};\n\nexport default CardItem;\n","import React from 'react';\nimport CardItem from './CardItem';\nimport Moment from 'react-moment';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({ conData, gloData, country }) => {\n    if (!conData.confirmed) {\n        return 'Loading';\n    }\n\n    return (\n        <div className={styles.information}>\n            <div className={styles.information__card}>\n                {Object.keys(conData).map((key, index) => (\n                    <CardItem\n                        countryNum={conData[key].value}\n                        globalNum={gloData[key].value}\n                        country={country}\n                        title={key}\n                        key={index}\n                    />\n                ))}\n            </div>\n            <div className={styles.information__date}>\n                Last Update:{' '}\n                <span>\n                    <Moment format='YYYY/MM/DD HH:mm'>{gloData.lastUpdate}</Moment>\n                </span>\n            </div>\n        </div>\n    );\n};\n\nexport default Cards;\n","import axios from 'axios';\n\n/**\n * API from Mathdro\n */\nconst url = 'https://covid19.mathdro.id/api';\n\n/**\n * Discard\n */\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        const {\n            data: { confirmed, recovered, deaths, lastUpdate },\n        } = await axios.get(changeableUrl);\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n\n        // const data = await axios.get(changeableUrl);\n\n        // return data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch data by country\n * @param {String} country\n */\nexport const fetchCountryData = async (country) => {\n    const countryUrl = `${url}/countries/${country.toLowerCase()}`;\n\n    try {\n        const {\n            data: { confirmed, recovered, deaths },\n        } = await axios.get(countryUrl);\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n        };\n    } catch (error) {\n        console.log(error);\n        return {\n            error: `${country} does not have any info.`,\n        };\n    }\n};\n\n/**\n * Fetch global data\n */\nexport const fetchGlobalData = async () => {\n    try {\n        const {\n            data: { confirmed, recovered, deaths, lastUpdate },\n        } = await axios.get(url);\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch global daily data\n */\nexport const fetchDailyData = async () => {\n    try {\n        console.log('fetchDailyData');\n        const { data } = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n\n        return modifiedData;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch daily confirmed data by state\n */\nexport const fetchDailyStateData = async (country) => {\n    const stateUrl = `${url}/countries/${country.toLowerCase()}/confirmed`;\n\n    try {\n        const { data } = await axios.get(stateUrl);\n\n        const stateData = data.map((state) => ({\n            provinceState: state.provinceState,\n            confirmed: state.confirmed,\n            recovered: state.recovered,\n            deaths: state.deaths,\n            date: state.lastUpdate,\n        }));\n\n        // Remove duplicate object by provinceState since it's the total, return a list of objects\n        const stateDataClean = stateData.filter(\n            // state -> item in stateData, index -> index of state, self -> array reference (stateData)\n            (state, index, self) =>\n                index === self.findIndex((t) => t.provinceState === state.provinceState)\n        );\n\n        // get the data of last 60 days\n        return stateDataClean;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch countries\n */\nexport const fetchCountries = async () => {\n    try {\n        console.log('fetchCountries');\n        const {\n            data: { countries },\n        } = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error);\n    }\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setDailyData(await fetchDailyData());\n        };\n\n        fetchData();\n    }, [setDailyData]);\n\n    const lineChart =\n        dailyData.length !== 0 ? (\n            <Line\n                data={{\n                    labels: dailyData.slice(-60).map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: dailyData.slice(-60).map(({ confirmed }) => confirmed),\n                            label: 'Infected',\n                            borderColor: 'rgba(0, 153, 255, 0.5)',\n                            backgroundColor: 'rgba(0, 153, 255, 0.2)',\n                            fill: true,\n                        },\n                        {\n                            data: dailyData.slice(-60).map(({ deaths }) => deaths),\n                            label: 'Deaths',\n                            borderColor: 'rgba(255, 77, 77, 0.8)',\n                            backgroundColor: 'rgba(255, 77, 77, 0.3)',\n                            fill: true,\n                        },\n                    ],\n                }}\n            />\n        ) : null;\n\n    const barChart = confirmed ? (\n        <Bar\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [\n                    {\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 153, 255, 0.5)',\n                            'rgba(108, 238, 173, 0.6)',\n                            'rgba(255, 77, 77, 0.8)',\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    },\n                ],\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, text: `Current state in ${country}` },\n                size: 10,\n            }}\n        />\n    ) : null;\n\n    return <div className={styles.container}>{country ? barChart : lineChart}</div>;\n};\n\nexport default Chart;\n","import React, { useEffect, useState } from 'react';\nimport { HorizontalBar } from 'react-chartjs-2';\nimport { fetchDailyStateData } from '../../api';\n\nimport styles from './Chart.module.css';\nimport cx from 'classnames';\n\nconst StateChart = ({ country }) => {\n    const [stateData, setStateData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setStateData(await fetchDailyStateData(country ? country : 'Australia'));\n        };\n\n        fetchData();\n    }, [setStateData, country]);\n\n    const labels = [\n        { Confirmed: 'rgba(0, 153, 255, 0.5)' },\n        { Recovered: 'rgba(108, 238, 173, 0.6)' },\n        { Deaths: 'rgba(255, 77, 77, 0.8)' },\n    ];\n    let data = null;\n    if (Object.keys(stateData).length) {\n        data = {\n            labels: stateData.slice(0, 10).map((state) => state.provinceState),\n            datasets: labels.map((label) => ({\n                label: Object.keys(label).toString(),\n                backgroundColor: label[Object.keys(label)],\n                borderColor: label[Object.keys(label)],\n                borderWidth: 1,\n                hoverBackgroundColor: label[Object.keys(label)],\n                hoverBorderColor: label[Object.keys(label)],\n                data: stateData.map((state) => state[Object.keys(label).toString().toLowerCase()]),\n                options: {\n                    maintainAspectRatio: false,\n                },\n            })),\n        };\n    }\n\n    return (\n        <div className={cx(styles.container, styles.barchart__horizontal)}>\n            {data && Object.keys(stateData).length > 1 ? <HorizontalBar data={data} /> : null}\n        </div>\n    );\n};\n\nexport default StateChart;\n","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport { fetchCountries } from '../../api';\n\nimport styles from './CountryPicker.module.css';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [fetchedCountries, setFetchedCountries] = useState([]);\n\n    useEffect(() => {\n        const countries = async () => {\n            setFetchedCountries(await fetchCountries());\n        };\n\n        countries();\n    }, [setFetchedCountries]);\n\n    return (\n        <FormControl className={styles.formControl}>\n            <NativeSelect defaultValue='' onChange={(e) => handleCountryChange(e.target.value)}>\n                <option value=''>Global</option>\n                {fetchedCountries.map((country, index) => (\n                    <option key={index} value={country}>\n                        {country}\n                    </option>\n                ))}\n            </NativeSelect>\n        </FormControl>\n    );\n};\n\nexport default CountryPicker;\n","import React from 'react';\n\nimport styles from './CountryFlagPicker.module.css';\n\nconst CountryFlagPicker = ({ countrySelected, handleCountryChange }) => {\n    const countryList = [\n        { au: 'Australia' },\n        { us: 'United States of America' },\n        { br: 'Brazil' },\n        { ru: 'Russia' },\n        { es: 'spain' },\n        { gb: 'United Kingdom' },\n        { fr: 'France' },\n        { de: 'Germany' },\n        { tr: 'Turkey' },\n        { in: 'India' },\n        { ir: 'Iran' },\n        { cn: 'China' },\n    ];\n\n    return (\n        <div className={styles.flag}>\n            {countryList.map((country) => (\n                <img\n                    src={`https://www.countryflags.io/${Object.keys(country)[0]}/flat/64.png`}\n                    alt={`flag ${Object.values(country)[0]}`}\n                    key={Object.keys(country)[0]}\n                    onClick={() => handleCountryChange(Object.values(country)[0])}\n                    className={styles.flag__item}\n                    style={\n                        countrySelected === Object.values(country)[0]\n                            ? { transform: 'scale(1.15)' }\n                            : null\n                    }\n                ></img>\n            ))}\n        </div>\n    );\n};\n\nexport default CountryFlagPicker;\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport ReactTable from 'react-table-v6';\n\nimport 'react-table-v6/react-table.css';\nimport styles from './Table.module.css';\n\nconst Table = ({ country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setDailyData(await fetchDailyData());\n        };\n\n        fetchData();\n    }, [setDailyData]);\n\n    const tableData = [];\n    if (dailyData.length > 0) {\n        for (let i = dailyData.length; i > 1; i--) {\n            tableData.push({\n                date: dailyData[i - 1].date,\n                deaths: dailyData[i - 1].deaths - dailyData[i - 2].deaths,\n                confirmed: dailyData[i - 1].confirmed - dailyData[i - 2].confirmed,\n            });\n        }\n    }\n\n    const columns = [\n        {\n            Header: 'Date',\n            accessor: 'date', // String-based value accessors!\n            style: { textAlign: 'center' },\n        },\n        {\n            Header: 'Infected',\n            accessor: 'confirmed', // String-based value accessors!\n            width: 70,\n            style: { textAlign: 'center' },\n        },\n        {\n            Header: 'Deaths',\n            accessor: 'deaths', // String-based value accessors!\n            width: 70,\n            style: { textAlign: 'center' },\n        },\n    ];\n\n    return (\n        <div>\n            {country === '' ? (\n                <div className={styles.table}>\n                    <p className={styles.table_title}>Global Data by Date</p>\n                    <ReactTable\n                        data={tableData}\n                        columns={columns}\n                        // showPagination={false}\n                        defaultPageSize={20}\n                        className='-striped -highlight -center'\n                    />\n                </div>\n            ) : null}\n        </div>\n    );\n};\n\nexport default Table;\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyStateData } from '../../api';\nimport ReactTable from 'react-table-v6';\n\nimport 'react-table-v6/react-table.css';\nimport styles from './Table.module.css';\n\nconst StateTable = ({ country }) => {\n    const [stateData, setStateData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setStateData(await fetchDailyStateData(country ? country : 'Australia'));\n        };\n\n        fetchData();\n    }, [setStateData, country]);\n\n    console.log(stateData);\n\n    const columns = [\n        {\n            Header: 'State',\n            accessor: 'provinceState', // String-based value accessors!\n            style: { textAlign: 'left' },\n        },\n        {\n            Header: 'Infected',\n            accessor: 'confirmed', // String-based value accessors!\n            width: 70,\n            style: { textAlign: 'center' },\n        },\n        {\n            Header: 'Recovered',\n            accessor: 'recovered', // String-based value accessors!\n            width: 70,\n            style: { textAlign: 'center' },\n        },\n        {\n            Header: 'Deaths',\n            accessor: 'deaths', // String-based value accessors!\n            width: 70,\n            style: { textAlign: 'center' },\n        },\n    ];\n\n    return (\n        <div className={styles.table}>\n            {Object.keys(stateData).length > 1 && country !== '' ? (\n                <div>\n                    <p className={styles.table_title}>\n                        State Data in {country ? country : 'Australia'}\n                    </p>\n                    <ReactTable\n                        data={stateData}\n                        columns={columns}\n                        showPagination={false}\n                        pageSize={Object.keys(stateData).length}\n                        className='-striped -highlight'\n                    />\n                </div>\n            ) : null}\n        </div>\n    );\n};\n\nexport default StateTable;\n","import React, { useEffect, useState, memo } from 'react';\nimport { ComposableMap, Geographies, Geography } from 'react-simple-maps';\n\nimport styles from './MapChart.module.css';\n\nconst MapChart = ({ countryHovered, handleCountryChange }) => {\n    useEffect(() => {});\n\n    const [countrySelected, setCountrySelected] = useState('');\n\n    const geoGlobal =\n        'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\n    const onMapClicked = (e) => {\n        // console.log(e);\n        handleCountryChange(e.NAME);\n        setCountrySelected(e.NAME);\n    };\n\n    return (\n        <div className={styles.map}>\n            <ComposableMap\n                projection={'geoMercator'}\n                data-tip=''\n                projectionConfig={{ scale: 100, rotate: [-160, 0, 0] }}\n            >\n                {/* <ZoomableGroup> */}\n                <Geographies geography={geoGlobal}>\n                    {({ geographies }) =>\n                        geographies.map((geo) => (\n                            <Geography\n                                key={geo.rsmKey}\n                                geography={geo}\n                                stroke='#EAEAEC'\n                                strokeWidth='0.5'\n                                onMouseEnter={() => {\n                                    const { NAME } = geo.properties;\n                                    countryHovered(`${NAME}`);\n                                }}\n                                onMouseLeave={() => {\n                                    countryHovered('');\n                                }}\n                                onClick={() => onMapClicked(geo.properties)}\n                                fill={\n                                    countrySelected === geo.properties.NAME\n                                        ? 'rgba(0, 153, 255, 0.6)'\n                                        : '#9998A3'\n                                }\n                                style={{\n                                    default: {\n                                        outline: 'none',\n                                    },\n                                    hover: {\n                                        fill: 'rgba(0, 153, 255, 0.6)',\n                                        stroke: 'rgba(0, 153, 255, 0.8)',\n                                        strockWidth: 0.5,\n                                        outline: 'none',\n                                    },\n                                    pressed: {\n                                        fill: 'rgba(0, 153, 255, 0.7)',\n                                        stroke: 'rgba(0, 153, 255)',\n                                        strokeWidth: 0.75,\n                                        outline: 'none',\n                                        transition: 'all 250ms',\n                                    },\n                                }}\n                            />\n                        ))\n                    }\n                </Geographies>\n                {/* </ZoomableGroup> */}\n            </ComposableMap>\n        </div>\n    );\n};\n\nexport default memo(MapChart);\n","import React from 'react';\n\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\nimport StateChart from './components/Chart/StateChart';\nimport CountryPicker from './components/CountryPicker/CountryPicker';\nimport CountryFlagPicker from './components/CountryFlagPicker/CountryFlagPicker';\nimport Table from './components/Table/Table';\nimport StateTable from './components/Table/StateTable';\nimport MapChart from './components/MapChart/MapChart';\nimport { fetchCountryData, fetchGlobalData } from './api';\nimport ReactTooltip from 'react-tooltip';\n\nimport styles from './App.module.css';\n\nclass App extends React.Component {\n    state = {\n        countryData: {},\n        globalData: {},\n        lastUpdate: '',\n        country: '',\n        content: '',\n    };\n\n    async componentDidMount() {\n        const covData = await fetchGlobalData();\n        const covContryData = await fetchCountryData('Australia');\n        this.setState({\n            globalData: covData,\n            lastUpdate: covData.lastUpdate,\n            countryData: covContryData,\n        });\n        console.log('componentDidMount');\n    }\n\n    onPickerCountryChange = async (country) => {\n        // fetch the data\n        let countrySelected = country;\n        try {\n            console.log(country);\n            if (country === 'United States of America') {\n                countrySelected = 'USA';\n            }\n            const covData = await fetchCountryData(countrySelected);\n            if (!covData.error) {\n                this.setState({ countryData: covData, country: countrySelected });\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    onMapCountryHover = (content) => {\n        // console.log(content);\n        this.setState({ ...this.state, content: content });\n    };\n\n    render() {\n        const { countryData, globalData, country } = this.state;\n\n        return (\n            <div className={styles.container}>\n                <h1 className={styles.title}>COVID-19 TRACKER</h1>\n                <Cards conData={countryData} gloData={globalData} country={country} />\n                <CountryFlagPicker\n                    countrySelected={country}\n                    handleCountryChange={this.onPickerCountryChange}\n                />\n                <CountryPicker handleCountryChange={this.onPickerCountryChange} />\n                <div className={styles.map}>\n                    <MapChart\n                        countryHovered={this.onMapCountryHover}\n                        handleCountryChange={this.onPickerCountryChange}\n                    />\n                    <ReactTooltip>{this.state.content}</ReactTooltip>\n                </div>\n                <Chart data={countryData} country={country} />\n                <Table country={country} />\n                <StateChart country={country} />\n                <StateTable country={country} />\n                <p className={styles.footer}>\n                    Developed by <a href='https://github.com/stevechanvii/cov-19'>Steve Chan</a> |\n                    Data Source from{' '}\n                    <a href='https://github.com/mathdroid/covid-19-api'>Mathdro API</a>\n                </p>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table_global\":\"Table_table_global__2n46g\",\"table_title\":\"Table_table_title__1N9D6\",\"table\":\"Table_table__3cVv6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\",\"barchart__horizontal\":\"Chart_barchart__horizontal__1yBQ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"title\":\"App_title__-GfWs\",\"map\":\"App_map__3Febj\",\"footer\":\"App_footer__29Fsv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"flag\":\"CountryFlagPicker_flag__dnfVV\",\"flag__item\":\"CountryFlagPicker_flag__item__DDvCl\"};"],"sourceRoot":""}