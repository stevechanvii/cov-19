{"version":3,"sources":["components/CountryFlagPicker/CountryFlagPicker.module.css","components/Cards/CardItem.jsx","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/Chart/StateChart.jsx","components/MapChart/MapChart.jsx","App.js","index.js","components/Chart/Chart.module.css","App.module.css","components/Cards/Cards.module.css"],"names":["module","exports","CardItem","countryNum","globalNum","country","title","className","cx","styles","information__card__item","key","information__card__item__title","information__card__item__country","start","end","Number","duartion","separator","Cards","conData","gloData","confirmed","information","information__card","Object","keys","map","index","value","information__date","format","lastUpdate","url","fetchCountryData","a","countryUrl","toLowerCase","axios","get","data","recovered","deaths","console","log","error","fetchGlobalData","fetchDailyData","modifiedData","dailyData","total","date","reportDate","slice","fetchDailyStateData","stateUrl","stateData","state","provinceState","Chart","useState","setDailyData","useEffect","fetchData","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","text","container","StateChart","setStateData","Confirmed","Recovered","Deaths","toString","borderWidth","hoverBackgroundColor","hoverBorderColor","maintainAspectRatio","barchart__horizontal","memo","countryHovered","handleCountryChange","countrySelected","setCountrySelected","projection","data-tip","projectionConfig","scale","rotate","geography","geographies","geo","rsmKey","stroke","strokeWidth","onMouseEnter","NAME","properties","onMouseLeave","onClick","e","style","default","outline","hover","strockWidth","pressed","transition","App","countryData","globalData","content","onPickerCountryChange","covData","setState","onMapCountryHover","covContryData","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d2d2399.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"flag\":\"CountryFlagPicker_flag__dnfVV\",\"flag__item\":\"CountryFlagPicker_flag__item__DDvCl\"};","import React from 'react';\nimport CountUp from 'react-countup';\n\nimport styles from './Cards.module.css';\nimport cx from 'classnames';\n\nconst CardItem = ({ countryNum, globalNum, country, title }) => {\n    if (!countryNum) {\n        return 'Loading';\n    }\n\n    return (\n        <div className={cx(styles.information__card__item, styles[title])} key={title}>\n            <h1 className={styles.information__card__item__title}>{title}</h1>\n            <h2 className={styles.information__card__item__country}>\n                <span>{country ? country : 'Australia'}: </span>\n                <CountUp start={0} end={Number(countryNum)} duartion={3} separator=',' />\n            </h2>\n            <h2 className={styles.information__card__item__country}>\n                <span>Global: </span>\n                <CountUp start={0} end={Number(globalNum)} duartion={3} separator=',' />\n            </h2>\n        </div>\n    );\n};\n\nexport default CardItem;\n","import React from 'react';\nimport CardItem from './CardItem';\nimport Moment from 'react-moment';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({ conData, gloData, country }) => {\n    if (!conData.confirmed) {\n        return 'Loading';\n    }\n\n    return (\n        <div className={styles.information}>\n            <div className={styles.information__card}>\n                {Object.keys(conData).map((key, index) => (\n                    <CardItem\n                        countryNum={conData[key].value}\n                        globalNum={gloData[key].value}\n                        country={country}\n                        title={key}\n                        key={index}\n                    />\n                ))}\n            </div>\n            <div className={styles.information__date}>\n                Last Update:{' '}\n                <span>\n                    <Moment format='YYYY/MM/DD HH:mm'>{gloData.lastUpdate}</Moment>\n                </span>\n            </div>\n        </div>\n    );\n};\n\nexport default Cards;\n","import axios from 'axios';\n\n/**\n * API from Mathdro\n */\nconst url = 'https://covid19.mathdro.id/api';\n\n/**\n * Discard\n */\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        const {\n            data: { confirmed, recovered, deaths, lastUpdate },\n        } = await axios.get(changeableUrl);\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n\n        // const data = await axios.get(changeableUrl);\n\n        // return data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch data by country\n * @param {String} country\n */\nexport const fetchCountryData = async (country) => {\n    const countryUrl = `${url}/countries/${country.toLowerCase()}`;\n\n    try {\n        const {\n            data: { confirmed, recovered, deaths },\n        } = await axios.get(countryUrl);\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n        };\n    } catch (error) {\n        console.log(error);\n        return {\n            error: `${country} does not have any info.`,\n        };\n    }\n};\n\n/**\n * Fetch global data\n */\nexport const fetchGlobalData = async () => {\n    try {\n        const {\n            data: { confirmed, recovered, deaths, lastUpdate },\n        } = await axios.get(url);\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch global daily data\n */\nexport const fetchDailyData = async () => {\n    try {\n        console.log('fetchDailyData');\n        const { data } = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n\n        // get the data of last 60 days\n        return modifiedData.slice(-60);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch daily confirmed data by state\n */\nexport const fetchDailyStateData = async (country) => {\n    const stateUrl = `${url}/countries/${country.toLowerCase()}/confirmed`;\n\n    try {\n        const { data } = await axios.get(stateUrl);\n\n        const stateData = data.map((state) => ({\n            provinceState: state.provinceState,\n            confirmed: state.confirmed,\n            recovered: state.recovered,\n            deaths: state.deaths,\n            date: state.lastUpdate,\n        }));\n\n        // get the data of last 60 days\n        return stateData.slice(0, 20);\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch countries\n */\nexport const fetchCountries = async () => {\n    try {\n        console.log('fetchCountries');\n        const {\n            data: { countries },\n        } = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error);\n    }\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setDailyData(await fetchDailyData());\n        };\n\n        fetchData();\n    }, [setDailyData]);\n\n    const lineChart =\n        dailyData.length !== 0 ? (\n            <Line\n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: dailyData.map(({ confirmed }) => confirmed),\n                            label: 'Infected',\n                            borderColor: 'rgba(0, 153, 255, 0.5)',\n                            backgroundColor: 'rgba(0, 153, 255, 0.2)',\n                            fill: true,\n                        },\n                        {\n                            data: dailyData.map(({ deaths }) => deaths),\n                            label: 'Deaths',\n                            borderColor: 'rgba(255, 77, 77, 0.8)',\n                            backgroundColor: 'rgba(255, 77, 77, 0.3)',\n                            fill: true,\n                        },\n                    ],\n                }}\n            />\n        ) : null;\n\n    const barChart = confirmed ? (\n        <Bar\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [\n                    {\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 153, 255, 0.5)',\n                            'rgba(108, 238, 173, 0.6)',\n                            'rgba(255, 77, 77, 0.8)',\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    },\n                ],\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, text: `Current state in ${country}` },\n            }}\n        />\n    ) : null;\n\n    return <div className={styles.container}>{country ? barChart : lineChart}</div>;\n};\n\nexport default Chart;\n","import React, { useEffect, useState } from 'react';\nimport { HorizontalBar } from 'react-chartjs-2';\nimport { fetchDailyStateData } from '../../api';\n\nimport styles from './Chart.module.css';\nimport cx from 'classnames';\n\nconst StateChart = ({ country }) => {\n    const [stateData, setStateData] = useState({});\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setStateData(await fetchDailyStateData(country ? country : 'Australia'));\n        };\n\n        fetchData();\n    }, [setStateData, country]);\n\n    const labels = [\n        { Confirmed: 'rgba(0, 153, 255, 0.5)' },\n        { Recovered: 'rgba(108, 238, 173, 0.6)' },\n        { Deaths: 'rgba(255, 77, 77, 0.8)' },\n    ];\n    let data = null;\n    if (Object.keys(stateData).length) {\n        data = {\n            labels: stateData.map((state) => state.provinceState),\n            datasets: labels.map((label) => ({\n                label: Object.keys(label).toString(),\n                backgroundColor: label[Object.keys(label)],\n                borderColor: label[Object.keys(label)],\n                borderWidth: 1,\n                hoverBackgroundColor: label[Object.keys(label)],\n                hoverBorderColor: label[Object.keys(label)],\n                data: stateData.map((state) => state[Object.keys(label).toString().toLowerCase()]),\n                options: {\n                    maintainAspectRatio: false,\n                },\n            })),\n        };\n    }\n\n    return (\n        <div className={cx(styles.container, styles.barchart__horizontal)}>\n            {data && Object.keys(stateData).length > 1 ? <HorizontalBar data={data} /> : null}\n        </div>\n    );\n};\n\nexport default StateChart;\n","import React, { useEffect, useState, memo } from 'react';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from 'react-simple-maps';\n\n// import styles from './MapChart.module.css';\n\nconst MapChart = ({ countryHovered, handleCountryChange }) => {\n    useEffect(() => {});\n\n    const [countrySelected, setCountrySelected] = useState('');\n\n    const geoGlobal =\n        'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\n    const onMapClicked = (e) => {\n        // console.log(e);\n        handleCountryChange(e.NAME);\n        setCountrySelected(e.NAME);\n    };\n\n    return (\n        <>\n            <ComposableMap\n                projection={'geoMercator'}\n                data-tip=''\n                projectionConfig={{ scale: 100, rotate: [-160, 0, 0] }}\n            >\n                {/* <ZoomableGroup> */}\n                <Geographies geography={geoGlobal}>\n                    {({ geographies }) =>\n                        geographies.map((geo) => (\n                            <Geography\n                                key={geo.rsmKey}\n                                geography={geo}\n                                stroke='#EAEAEC'\n                                strokeWidth='0.5'\n                                onMouseEnter={() => {\n                                    const { NAME } = geo.properties;\n                                    countryHovered(`${NAME}`);\n                                }}\n                                onMouseLeave={() => {\n                                    countryHovered('');\n                                }}\n                                onClick={() => onMapClicked(geo.properties)}\n                                fill={\n                                    countrySelected === geo.properties.NAME\n                                        ? 'rgba(0, 153, 255, 0.6)'\n                                        : '#9998A3'\n                                }\n                                style={{\n                                    default: {\n                                        outline: 'none',\n                                    },\n                                    hover: {\n                                        fill: 'rgba(0, 153, 255, 0.6)',\n                                        stroke: 'rgba(0, 153, 255, 0.8)',\n                                        strockWidth: 0.5,\n                                        outline: 'none',\n                                    },\n                                    pressed: {\n                                        fill: 'rgba(0, 153, 255, 0.7)',\n                                        stroke: 'rgba(0, 153, 255)',\n                                        strokeWidth: 0.75,\n                                        outline: 'none',\n                                        transition: 'all 250ms',\n                                    },\n                                }}\n                            />\n                        ))\n                    }\n                </Geographies>\n                {/* </ZoomableGroup> */}\n            </ComposableMap>\n        </>\n    );\n};\n\nexport default memo(MapChart);\n","import React from 'react';\n\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\nimport StateChart from './components/Chart/StateChart';\n// import CountryPicker from './components/CountryPicker/CountryPicker';\nimport CountryFlagPicker from './components/CountryFlagPicker/CountryFlagPicker';\nimport MapChart from './components/MapChart/MapChart';\nimport { fetchCountryData, fetchGlobalData } from './api';\nimport ReactTooltip from 'react-tooltip';\n\nimport styles from './App.module.css';\n\nclass App extends React.Component {\n    state = {\n        countryData: {},\n        globalData: {},\n        lastUpdate: '',\n        country: '',\n        content: '',\n    };\n\n    async componentDidMount() {\n        const covData = await fetchGlobalData();\n        const covContryData = await fetchCountryData('Australia');\n        this.setState({\n            globalData: covData,\n            lastUpdate: covData.lastUpdate,\n            countryData: covContryData,\n        });\n        console.log('componentDidMount');\n    }\n\n    onPickerCountryChange = async (country) => {\n        // fetch the data\n        let countrySelected = country;\n        try {\n            console.log(country);\n            if (country === 'United States of America') {\n                countrySelected = 'USA';\n            }\n            const covData = await fetchCountryData(countrySelected);\n            if (!covData.error) {\n                this.setState({ countryData: covData, country: countrySelected });\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    onMapCountryHover = (content) => {\n        // console.log(content);\n        this.setState({ ...this.state, content: content });\n    };\n\n    render() {\n        const { countryData, globalData, country } = this.state;\n\n        return (\n            <div className={styles.container}>\n                <h1 className={styles.title}>COVID-19 TRACKER</h1>\n                <Cards conData={countryData} gloData={globalData} country={country} />\n                {/* <CountryFlagPicker /> */}\n                {/* <CountryPicker handleCountryChange={this.onPickerCountryChange} /> */}\n                <div className={styles.map}>\n                    <MapChart\n                        countryHovered={this.onMapCountryHover}\n                        handleCountryChange={this.onPickerCountryChange}\n                    />\n                    <ReactTooltip>{this.state.content}</ReactTooltip>\n                </div>\n                <Chart data={countryData} country={country} />\n                <StateChart country={country} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\",\"barchart__horizontal\":\"Chart_barchart__horizontal__1yBQ9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"title\":\"App_title__-GfWs\",\"map\":\"App_map__3Febj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"information\":\"Cards_information__7OXae\",\"information__card\":\"Cards_information__card__2mXQ4\",\"information__card__item\":\"Cards_information__card__item__Pkf5i\",\"confirmed\":\"Cards_confirmed__iMMyf\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\",\"information__card__item__title\":\"Cards_information__card__item__title__mavP9\",\"information__card__item__country\":\"Cards_information__card__item__country__3-58w\",\"information__date\":\"Cards_information__date__2raRR\"};"],"sourceRoot":""}