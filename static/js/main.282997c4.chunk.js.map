{"version":3,"sources":["components/Cards/CardItem.jsx","components/Cards/Cards.jsx","api/index.js","components/Chart/Chart.jsx","components/MapChart/MapChart.jsx","App.js","index.js","App.module.css","components/Cards/Cards.module.css","components/Chart/Chart.module.css"],"names":["CardItem","countryNum","globalNum","country","title","className","cx","styles","information__card__item","key","information__card__item__title","information__card__item__country","start","end","Number","duartion","separator","Cards","conData","gloData","confirmed","information","information__card","Object","keys","map","index","value","information__date","format","lastUpdate","url","fetchCountryData","a","countryUrl","axios","get","data","recovered","deaths","console","log","error","fetchGlobalData","fetchDailyData","modifiedData","dailyData","total","date","reportDate","Chart","useState","setDailyData","useEffect","fetchData","lineChart","length","labels","datasets","label","borderColor","backgroundColor","fill","barChart","options","legend","display","text","container","memo","countryHovered","handleCountryChange","countrySelected","setCountrySelected","projection","data-tip","projectionConfig","scale","rotate","geography","geographies","geo","rsmKey","stroke","strokeWidth","onMouseEnter","NAME","properties","onMouseLeave","onClick","e","style","default","outline","hover","strockWidth","pressed","transition","App","state","countryData","globalData","content","onPickerCountryChange","covData","setState","onMapCountryHover","covContryData","this","React","Component","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.282997c4.chunk.js","sourcesContent":["import React from 'react';\nimport CountUp from 'react-countup';\n\nimport styles from './Cards.module.css';\nimport cx from 'classnames';\n\nconst CardItem = ({ countryNum, globalNum, country, title }) => {\n    if (!countryNum) {\n        return 'Loading';\n    }\n\n    return (\n        <div className={cx(styles.information__card__item, styles[title])} key={title}>\n            <h1 className={styles.information__card__item__title}>{title}</h1>\n            <h2 className={styles.information__card__item__country}>\n                <span>{country ? country : 'Australia'}: </span>\n                <CountUp start={0} end={Number(countryNum)} duartion={3} separator=',' />\n            </h2>\n            <h2 className={styles.information__card__item__country}>\n                <span>Global: </span>\n                <CountUp start={0} end={Number(globalNum)} duartion={3} separator=',' />\n            </h2>\n        </div>\n    );\n};\n\nexport default CardItem;\n","import React from 'react';\nimport CardItem from './CardItem';\nimport Moment from 'react-moment';\n\nimport styles from './Cards.module.css';\n\nconst Cards = ({ conData, gloData, country }) => {\n    if (!conData.confirmed) {\n        return 'Loading';\n    }\n\n    return (\n        <div className={styles.information}>\n            <div className={styles.information__card}>\n                {Object.keys(conData).map((key, index) => (\n                    <CardItem\n                        countryNum={conData[key].value}\n                        globalNum={gloData[key].value}\n                        country={country}\n                        title={key}\n                        key={index}\n                    />\n                ))}\n            </div>\n            <div className={styles.information__date}>\n                Last Update:{' '}\n                <span>\n                    <Moment format='YYYY/MM/DD HH:mm'>{gloData.lastUpdate}</Moment>\n                </span>\n            </div>\n        </div>\n    );\n};\n\nexport default Cards;\n","import axios from 'axios';\n\n/**\n * API from Mathdro\n */\nconst url = 'https://covid19.mathdro.id/api';\n\n/**\n * Discard\n */\nexport const fetchData = async (country) => {\n    let changeableUrl = url;\n\n    if (country) {\n        changeableUrl = `${url}/countries/${country}`;\n    }\n\n    try {\n        const {\n            data: { confirmed, recovered, deaths, lastUpdate },\n        } = await axios.get(changeableUrl);\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n\n        // const data = await axios.get(changeableUrl);\n\n        // return data;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch data by country\n * @param {String} country\n */\nexport const fetchCountryData = async (country) => {\n    const countryUrl = `${url}/countries/${country}`;\n\n    try {\n        const {\n            data: { confirmed, recovered, deaths },\n        } = await axios.get(countryUrl);\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n        };\n    } catch (error) {\n        console.log(error);\n        return {\n            error: `${country} does not have any info.`,\n        };\n    }\n};\n\n/**\n * Fetch global data\n */\nexport const fetchGlobalData = async () => {\n    try {\n        const {\n            data: { confirmed, recovered, deaths, lastUpdate },\n        } = await axios.get(url);\n\n        return {\n            confirmed,\n            recovered,\n            deaths,\n            lastUpdate,\n        };\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch global daily data\n */\nexport const fetchDailyData = async () => {\n    try {\n        console.log('fetchDailyData');\n        const { data } = await axios.get(`${url}/daily`);\n\n        const modifiedData = data.map((dailyData) => ({\n            confirmed: dailyData.confirmed.total,\n            deaths: dailyData.deaths.total,\n            date: dailyData.reportDate,\n        }));\n\n        return modifiedData;\n    } catch (error) {\n        console.log(error);\n    }\n};\n\n/**\n * Fetch countries\n */\nexport const fetchCountries = async () => {\n    try {\n        console.log('fetchCountries');\n        const {\n            data: { countries },\n        } = await axios.get(`${url}/countries`);\n        return countries.map((country) => country.name);\n    } catch (error) {\n        console.log(error);\n    }\n};\n","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api';\nimport { Line, Bar } from 'react-chartjs-2';\n\nimport styles from './Chart.module.css';\n\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\n    const [dailyData, setDailyData] = useState([]);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setDailyData(await fetchDailyData());\n        };\n\n        fetchData();\n    }, [setDailyData]);\n\n    const lineChart =\n        dailyData.length !== 0 ? (\n            <Line\n                data={{\n                    labels: dailyData.map(({ date }) => date),\n                    datasets: [\n                        {\n                            data: dailyData.map(({ confirmed }) => confirmed),\n                            label: 'Infected',\n                            borderColor: 'rgba(0, 153, 255, 0.5)',\n                            backgroundColor: 'rgba(0, 153, 255, 0.2)',\n                            fill: true,\n                        },\n                        {\n                            data: dailyData.map(({ deaths }) => deaths),\n                            label: 'Infected',\n                            borderColor: 'rgba(255, 77, 77, 0.8)',\n                            backgroundColor: 'rgba(255, 77, 77, 0.3)',\n                            fill: true,\n                        },\n                    ],\n                }}\n            />\n        ) : null;\n\n    const barChart = confirmed ? (\n        <Bar\n            data={{\n                labels: ['Infected', 'Recovered', 'Deaths'],\n                datasets: [\n                    {\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(0, 153, 255, 0.5)',\n                            'rgba(108, 238, 173, 0.6)',\n                            'rgba(255, 77, 77, 0.8)',\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value],\n                    },\n                ],\n            }}\n            options={{\n                legend: { display: false },\n                title: { display: true, text: `Current state in ${country}` },\n            }}\n        />\n    ) : null;\n\n    return <div className={styles.container}>{country ? barChart : lineChart}</div>;\n};\n\nexport default Chart;\n","import React, { useEffect, useState, memo } from 'react';\nimport { ComposableMap, Geographies, Geography, ZoomableGroup } from 'react-simple-maps';\n\n// import styles from './MapChart.module.css';\n\nconst MapChart = ({ countryHovered, handleCountryChange }) => {\n    useEffect(() => {});\n\n    const [countrySelected, setCountrySelected] = useState('');\n\n    const geoGlobal =\n        'https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json';\n\n    const onMapClicked = (e) => {\n        // console.log(e);\n        handleCountryChange(e.NAME);\n        setCountrySelected(e.NAME);\n    };\n\n    return (\n        <>\n            <ComposableMap\n                projection={'geoMercator'}\n                data-tip=''\n                projectionConfig={{ scale: 100, rotate: [-160, 0, 0] }}\n            >\n                {/* <ZoomableGroup> */}\n                <Geographies geography={geoGlobal}>\n                    {({ geographies }) =>\n                        geographies.map((geo) => (\n                            <Geography\n                                key={geo.rsmKey}\n                                geography={geo}\n                                stroke='#EAEAEC'\n                                strokeWidth='0.5'\n                                onMouseEnter={() => {\n                                    const { NAME } = geo.properties;\n                                    countryHovered(`${NAME}`);\n                                }}\n                                onMouseLeave={() => {\n                                    countryHovered('');\n                                }}\n                                onClick={() => onMapClicked(geo.properties)}\n                                fill={\n                                    countrySelected === geo.properties.NAME ? '#668cff' : '#9998A3'\n                                }\n                                style={{\n                                    default: {\n                                        outline: 'none',\n                                    },\n                                    hover: {\n                                        fill: '#809fff',\n                                        stroke: '#3366ff',\n                                        strockWidth: 0.5,\n                                        outline: 'none',\n                                    },\n                                    pressed: {\n                                        fill: '#DD4132',\n                                        stroke: '#9E1030',\n                                        strokeWidth: 0.75,\n                                        outline: 'none',\n                                        transition: 'all 250ms',\n                                    },\n                                }}\n                            />\n                        ))\n                    }\n                </Geographies>\n                {/* </ZoomableGroup> */}\n            </ComposableMap>\n        </>\n    );\n};\n\nexport default memo(MapChart);\n","import React from 'react';\n\nimport Cards from './components/Cards/Cards';\nimport Chart from './components/Chart/Chart';\n// import CountryPicker from './components/CountryPicker/CountryPicker';\nimport MapChart from './components/MapChart/MapChart';\nimport { fetchCountryData, fetchGlobalData } from './api';\nimport ReactTooltip from 'react-tooltip';\n\nimport styles from './App.module.css';\n\nclass App extends React.Component {\n    state = {\n        countryData: {},\n        globalData: {},\n        lastUpdate: '',\n        country: '',\n        content: '',\n    };\n\n    async componentDidMount() {\n        const covData = await fetchGlobalData();\n        const covContryData = await fetchCountryData('Australia');\n        this.setState({\n            globalData: covData,\n            lastUpdate: covData.lastUpdate,\n            countryData: covContryData,\n        });\n    }\n\n    onPickerCountryChange = async (country) => {\n        // fetch the data\n        let countrySelected = country;\n        try {\n            console.log(country);\n            if (country === 'United States of America') {\n                countrySelected = 'USA';\n            }\n            const covData = await fetchCountryData(countrySelected);\n            if (!covData.error) {\n                this.setState({ countryData: covData, country: countrySelected });\n            }\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    onMapCountryHover = (content) => {\n        // console.log(content);\n        this.setState({ ...this.state, content: content });\n    };\n\n    render() {\n        const { countryData, globalData, country } = this.state;\n\n        return (\n            <div className={styles.container}>\n                <h1 className={styles.title}>COVID-19 TRACKER</h1>\n                <Cards conData={countryData} gloData={globalData} country={country} />\n                {/* <CountryPicker handleCountryChange={this.onPickerCountryChange} /> */}\n                <div className={styles.map}>\n                    <MapChart\n                        countryHovered={this.onMapCountryHover}\n                        handleCountryChange={this.onPickerCountryChange}\n                    />\n                    <ReactTooltip>{this.state.content}</ReactTooltip>\n                </div>\n                <Chart data={countryData} country={country} />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"title\":\"App_title__-GfWs\",\"map\":\"App_map__3Febj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"information\":\"Cards_information__7OXae\",\"information__card\":\"Cards_information__card__2mXQ4\",\"information__card__item\":\"Cards_information__card__item__Pkf5i\",\"confirmed\":\"Cards_confirmed__iMMyf\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\",\"information__card__item__title\":\"Cards_information__card__item__title__mavP9\",\"information__card__item__country\":\"Cards_information__card__item__country__3-58w\",\"information__date\":\"Cards_information__date__2raRR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Chart_container__1PIOn\"};"],"sourceRoot":""}